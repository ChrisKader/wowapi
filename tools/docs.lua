local indir, outdir = unpack(arg)
local lfs = require('lfs')
local pf = require('pl.file')
local tags = {
  'wow',
  'wowt',
  'wow_classic',
  'wow_classic_era',
  'wow_classic_era_ptr',
  'wow_classic_ptr',
}
local docs = {}
local enums = {}
for _, tag in ipairs(tags) do
  local tagdir = indir .. '/' .. tag
  local docdir = tagdir .. '/Interface/AddOns/Blizzard_APIDocumentation'
  for f in lfs.dir(docdir) do
    if f:sub(-4) == '.lua' then
      pcall(setfenv(loadfile(docdir .. '/' .. f), {
        APIDocumentation = {
          AddDocumentationTable = function(_, t)
            docs[f] = docs[f] or {}
            docs[f][tag] = t
          end,
        }
      }))
    end
  end
  local env = {}
  setfenv(loadfile(tagdir .. '/Interface/GlobalEnvironment.lua'), env)()
  enums[tag] = assert(env.Enum)
end
lfs.mkdir(outdir)
local types = {
  bool = 'b',
  number = 'n',
  string = 's',
  table = 't',
}
local tables = {
  Constants = 'n',
  Enumeration = 'n',
  Structure = 't',
}
local tys = {}
-- First pass for types.
for _, envt in pairs(docs) do
  for _, t in pairs(envt) do
    for _, ty in ipairs(t.Tables or {}) do
      local c = assert(tables[ty.Type])
      local old = tys[ty.Name]
      if old then
        assert(old == c)
      else
        tys[ty.Name] = c
      end
    end
  end
end
local enum = enums.wow
local function insig(fn)
  local inputs = ''
  local firstDefault = nil
  for i, a in ipairs(fn.Arguments or {}) do
    local c = types[a.Type] or tys[a.Type] or (enum[a.Type] and 'n')
    if not c then
      print('unknown type ' .. a.Type)
      c = '?'
    end
    firstDefault = firstDefault or ((a.Default or a.Nilable) and i)
    inputs = inputs .. c
  end
  if firstDefault then
    local s = '{'
    for i = firstDefault, inputs:len() do
      s = s .. ' \'' .. inputs:sub(1, i-1) .. '\','
    end
    inputs = s .. ' \'' .. inputs .. '\' }'
  else
    inputs = '\'' .. inputs .. '\''
  end
  return inputs
end
local function outsig(fn)
  local outputs = ''
  for _, r in ipairs(fn.Returns or {}) do
    local c = (r.Nilable and 'x') or types[r.Type] or tys[r.Type] or (enum[r.Type] and 'n')
    if not c then
      print('unknown type ' .. r.Type)
      c = '?'
    end
    outputs = outputs .. c
  end
  return outputs
end
for f, envt in pairs(docs) do
  local t = envt.wow
  if t and t.Name then
    assert(t.Type == 'System', f)
    for _, fn in ipairs(t.Functions or {}) do
      assert(fn.Type == 'Function', f)
      local name = (t.Namespace and (t.Namespace .. '.') or '') .. fn.Name
      pf.write(outdir .. '/' .. name .. '.lua', ([[
return {
  name = '%s',
  status = 'autogenerated',
  inputs = %s,
  outputs = '%s',
}
]]):format(name, insig(fn), outsig(fn)))
    end
  elseif t then
    assert(t.Tables, f)
  end
end
